name: Periodic Ping Monitor

on:
  schedule:
    - cron: "*/5 * * * *"   # Runs every 5 minutes
  workflow_dispatch:        # Allows manual trigger
    inputs:
      workflow_id:
        description: 'Workflow id to check and trigger'
        required: false
        default: 'ping.yml'
      check_interval:
        description: 'Time interval (in minutes)'
        required: false
        default: '5'

jobs:
  workflow-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 3  # Add timeout to prevent hung jobs

    steps:
      - name: Workflow Check & Trigger
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.payload.inputs?.workflow_id || 'ping.yml'
            };

            try {
                // Parallel fetch: workflow details & last successful run.
              const [workflow_response, workflow_runs_response] = await Promise.all([
                github.rest.actions.getWorkflow(workflow),
                github.rest.actions.listWorkflowRuns({
                  ...workflow,
                  status: 'success',
                  per_page: 1,
                  exclude_pull_requests: true  // Optimize by excluding PR runs
                })
              ]);

              const workflow_name = workflow_response.data.name;
              const last_run = workflow_runs_response.data.workflow_runs[0];
              
              if (!last_run) {
                console.log(`No previous successful runs found for "${workflow_name}". Triggering workflow.`);
                await github.rest.actions.createWorkflowDispatch({
                  ...workflow,
                  ref: context.ref
                });
                return;
              }

              const time_since_last_run = Date.now() - new Date(last_run.created_at).getTime();
              const check_interval = parseInt(context.payload.inputs?.check_interval || '5') * 60 * 1000;

              if (time_since_last_run >= check_interval) {
                console.log(`The workflow "${workflow_name}" has missed its schedule (${time_since_last_run}ms since last run). Triggering new run.`);
                await github.rest.actions.createWorkflowDispatch({
                  ...workflow,
                  ref: context.ref
                });
              } else {
                console.log(`The workflow "${workflow_name}" is on schedule (${time_since_last_run}ms since last run).`);
              }
            } catch (error) {
              core.setFailed(`Workflow check failed: ${error.message}`);
            }
